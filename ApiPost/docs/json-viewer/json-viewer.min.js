(function ($) {
  function encodeJSONStr(str) { var encodeMap = { '"': '\\"', '\\': '\\\\', '\b': '\\b', '\f': '\\f', '\n': '\\n', '\r': '\\r', '\t': '\\t' }; return str.replace(/["\\\b\f\n\r\t]/g, function (match) { return encodeMap[match]; }); }
  function encodeJSON(json) {
    if (typeof json === 'string') { return encodeJSONStr(json); } else if (typeof json === 'object') { for (var attr in json) { json[attr] = encodeJSON(json[attr]); } } else if (Array.isArray(json)) { for (var i = 0; i < json.length; i++) { json[i] = encodeJSON(json[i]); } }
    return json;
  }
  function JsonEditor(container, json, options, arr1) {
    options = options || {}; if (options.editable !== false) { options.editable = true; }
    options.editable = false; options.withLinks = false; this.$container = $(container); this.options = options; this.load(json, arr1);
  }
  JsonEditor.prototype = { constructor: JsonEditor, load: function (json, arrJ) { this.$container.jsonViewer(encodeJSON(json), { collapsed: this.options.defaultCollapsed, withQuotes: true, withLinks: false }, arrJ).addClass('json-editor-blackbord').attr('contenteditable', !!this.options.editable); }, get: function () { try { this.$container.find('.collapsed').click(); return JSON.parse(this.$container.text()); } catch (ex) { throw new Error(ex); } } }
  window.JsonEditor = JsonEditor;
})(jQuery); (function ($) {
  function isCollapsable(arg) { return arg instanceof Object && Object.keys(arg).length > 0; }
  function isUrl(string) { var regexp = /^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/; return regexp.test(string); }
  function json2html(json, options, arrJ, parentKey) {
    const parentKeyArr = parentKey && parentKey.split('.')
    const tem = parentKeyArr && parentKeyArr.filter((it) => it != 'undefined')
    parentKey = tem && tem.join('.')
    var html = '';
    if (typeof json === 'string') {
      json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
      if (isUrl(json))
        html += '<a href="' + json + '" target="_blank" class="json-string json-url">"' + json + '"</a>';
      else
        html += '<span class="json-string">"' + json + '"</span>';
    }
    else if (typeof json === 'number') { html += '<span class="json-literal json-literal-number">' + json + '</span>'; }
    else if (typeof json === 'boolean') { html += '<span class="json-literal json-literal-boolean">' + json + '</span>'; }
    else if (json === null) { html += '<span class="json-literal json-literal-null">null</span>'; }
    else if (json instanceof Array) {
      if (json.length > 0) {
        html += '[<ol class="json-array">'; for (var i = 0; i < json.length; ++i) {
          html += '<li>'; if (isCollapsable(json[i])) { html += '<a href class="json-toggle"></a>'; }
          html += json2html(json[i], options, arrJ, parentKey ? parentKey + '.' + key : key); if (i < json.length - 1) { html += ','; }
          let arr = arrJ.filter(item => item.key == (parentKey ? parentKey + '.' + key : key))
          html += arr.length > 0 ? (arr[0]['description'] ? ' //' + arr[0]['description'] : arr.length) : '' + '</li>';
        }
        html += '</ol>]';
      }
      else { html += '[]'; }
    }
    else if (typeof json === 'object') {
      var key_count = Object.keys(json).length;
      if (key_count > 0) {
        html += '{<ul class="json-dict">'; for (var key in json) {
          if (json.hasOwnProperty(key)) {
            html += '<li>'; var keyRepr = options.withQuotes ? '<span class="json-string json-property">"' + key + '"</span>' : '<span class="json-property">' + key + '</span>'; if (isCollapsable(json[key])) { html += '<a href class="json-toggle"></a>' + keyRepr; }
            else { html += keyRepr; }
            html += ': ' + json2html(json[key], options, arrJ, parentKey ? parentKey + '.' + key : key); if (--key_count > 0)
              html += ','; let arr = arrJ.filter(item => item.key == (parentKey ? parentKey + '.' + key : key))
            html += arr.length > 0 ? (arr[0]['description'] ? ' //' + arr[0]['description'] : '') : '' + ' </li> ';
          }
        }
        html += '</ul>}';
      }
      else { html += '{}'; }
    }
    return html;
  }
  $.fn.jsonViewer = function (json, options, arrJ) {
    options = options || {}; return this.each(function () {
      var html = json2html(json, options, arrJ, ''); if (isCollapsable(json))
        html = '<a href class="json-toggle"></a>' + html; $(this).html(html); $(this).off('click'); $(this).on('click', 'a.json-toggle', function () {
          var target = $(this).toggleClass('collapsed').siblings('ul.json-dict, ol.json-array'); target.toggle(); if (target.is(':visible')) { target.siblings('.json-placeholder').remove(); }
          else { var count = target.children('li').length; var placeholder = count + (count > 1 ? ' items' : ' item'); target.after('<a href class="json-placeholder">' + placeholder + '</a>'); }
          return false;
        }); $(this).on('click', 'a.json-placeholder', function () { $(this).siblings('a.json-toggle').click(); return false; }); if (options.collapsed == true) { $(this).find('a.json-toggle').click(); }
    });
  };
})(jQuery);